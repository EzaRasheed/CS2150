C009 000		jmp	start	skip around the variables
0003 001	size	dw	3	array size = 3
001E 002	a 	dw 	0 	int a[]
0000 003	i 	dw	0 	int i
0000 004	max	dw 	0	int max = 0
3000 005	loadit	dw	5000		
0000 006	curr	dw	0	int curr = 0
0001 007	one	dw 	1
0000 008				leave space for changes
3001 009	start	load	size	load the size of the array
6003 00A		sub 	i	subtract size - i in accumulator
E01C 00B		jmpl 	xit  	if size - 1 is <  0, xit
D01C 00C		jmpe 	xit 	if size - 1 is = 0, xit
3005 00D		load 	loadit	form the instruction to load a[i]
5002 00E		add	a	add the base address of the array
5003 00F		add	i	add the current index
4011 010		store	doit	plant the instruction into the program
0000 011	doit	dw	0
4006 012		store 	curr	store current to equal a[i]
6004 013		sub	max 	subtract a[i] - max in accumulator
E018 014		jmpl	endloop	if max is > current(a[i]), go to endloop
D018 015		jmpe	endloop	if max is = current[a[i]), go to endloop
3006 016		load 	curr	load a[i] in accumulator
4004 017		store 	max 	update value of max in accumulator
3003 018	endloop	load	i	load i in accumulator
5007 019		add 	one	iterate through i++
4003 01A		store 	i	store updated i in accumulator
C009 01B		jmp 	start	jump back to loop through again
3004 01C	xit	load 	max	load max in accumulator
1800 01D		printH		print ending max value
0015 01E	a[0]	dw	4	a[0] = 15
0009 01F	a[1]	dw	9	a[1] = 9
0006 020	a[2]	dw	6	a[2] = 6
0000 021		halt		halt  